/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import Business.MasterOrderCatalog;
import Business.Order;
import Business.OrderItem;
import Business.Product;
import Business.Supplier;
import Business.SupplierDirectory;
import UserInterface.CustomerRole.ViewProductDetailJPanel;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author yyneu
 */
public class BrowseProducts extends javax.swing.JPanel {
    private JPanel upc;
    private SupplierDirectory supplierDir;
    private MasterOrderCatalog moc;
    private Order order;
    private boolean isCheckedOut = false;
    /**
     * Creates new form BrowseProducts
     */
    public BrowseProducts(JPanel upc, SupplierDirectory supplierDir,MasterOrderCatalog moc) 
    {
        initComponents();
        this.upc = upc;
        this.supplierDir=supplierDir;
        this.moc = moc;
        populateSupplierCombo();
        if(!isCheckedOut)
        order = new Order();
        
    }
    public void populateSupplierCombo()
    {
                
        supplierComboBox.removeAllItems();
        
        for(Supplier supplier:supplierDir.getSupplierDirectory())
        {
            supplierComboBox.addItem(supplier);
        }
        populateTable();
    }
    
    public void populateTable()
    {
         
         DefaultTableModel model =(DefaultTableModel)productTable.getModel();
         model.setRowCount(0);
         Supplier supplier = (Supplier)supplierComboBox.getSelectedItem();
         if(supplier != null)
         {
          for(Product p:supplier.getProductCatalog().getProductCatalog()){
            Object[] row = new Object[4];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAvail();
            model.addRow(row);
          }
         }
    }
    
    public void refreshProductTable(String keyword)
    {
         DefaultTableModel model =(DefaultTableModel)productTable.getModel();
         model.setRowCount(0);
         for(Supplier s:supplierDir.getSupplierDirectory())
         {
             for(Product p:s.getProductCatalog().getProductCatalog())
             {
                 if(p.getProdName().equalsIgnoreCase(keyword))
                 {
                      Object[] row = new Object[4];
                      row[0] = p;
                      row[1] = p.getModelNumber();
                      row[2] = p.getPrice();
                      row[3] = p.getAvail();
                      model.addRow(row);
                 }
             }
         }
    }
    public void refreshOrderTable()
    {
         DefaultTableModel model =(DefaultTableModel)orderTable.getModel();
         model.setRowCount(0);
         for(OrderItem oi:order.getOrderItemList())
         {
            
                      Object[] row = new Object[4];
                      row[0] = oi;
                      row[1] = oi.getSalesPrice();
                      row[2] = oi.getQuatity();
                      row[3] = oi.getQuatity() * oi.getSalesPrice();
                      model.addRow(row);
                 }
             }
         
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        supplierComboBox = new javax.swing.JComboBox();
        txtSearchKeyWord = new javax.swing.JTextField();
        btnSearchProduct = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        viewProdjButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addtoCartButton6 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnViewOrderItem = new javax.swing.JButton();
        txtNewQuantity = new javax.swing.JTextField();
        btnModifyQuantity = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        jLabel1.setText("Supplier");

        supplierComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        supplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBoxActionPerformed(evt);
            }
        });

        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });

        jLabel2.setText("Supplier Product Catalog");

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Price", "Avail"
            }
        ));
        jScrollPane1.setViewportView(productTable);

        viewProdjButton2.setText("View Product Detail");
        viewProdjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProdjButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Sales Price");

        jLabel4.setText("Quantity:");

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        jLabel5.setText("Item in cart");

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ));
        jScrollPane2.setViewportView(orderTable);

        btnViewOrderItem.setText("View Item");
        btnViewOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderItemActionPerformed(evt);
            }
        });

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        jButton8.setText("<< Back");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewOrderItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModifyQuantity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCheckOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveOrderItem))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewProdjButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addtoCartButton6))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(txtSearchKeyWord, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnSearchProduct))
                    .addComponent(jLabel1))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchKeyWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewProdjButton2)
                    .addComponent(jLabel3)
                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addtoCartButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewOrderItem)
                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModifyQuantity)
                    .addComponent(btnCheckOut)
                    .addComponent(btnRemoveOrderItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addContainerGap(231, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void supplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBoxActionPerformed
        // TODO add your handling code here:
             populateTable();
    }//GEN-LAST:event_supplierComboBoxActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        // TODO add your handling code here:
        String prodName = txtSearchKeyWord.getText();
        refreshProductTable(prodName);
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void viewProdjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProdjButton2ActionPerformed
        // TODO add your handling code here:
        int row = productTable.getSelectedRow();
         if(row <0){
              JOptionPane.showMessageDialog(null, "Please select a row from table first to view details!","Warning",JOptionPane.WARNING_MESSAGE);
              return;
         }
         Product p = (Product)productTable.getValueAt(row,0);
         
             ViewProductDetailJPanel vpdjp = new ViewProductDetailJPanel(upc,p);
               upc.add("ViewProductDetailJPanelSupplier",vpdjp);
              CardLayout layout =(CardLayout) upc.getLayout();
               layout.next(upc);
    }//GEN-LAST:event_viewProdjButton2ActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = productTable.getSelectedRow();
        if(selectedRow<0)
        {
              JOptionPane.showMessageDialog(null, "Please Select a row");
              return;
        }
        Product selectedProduct = (Product)productTable.getValueAt(selectedRow,0);
        int fetchQty = (Integer)quantitySpinner.getValue();
        if(fetchQty<=0)
        {
           JOptionPane.showMessageDialog(null, "Quantity cannot be less than equal to 0"); 
           return;
        }
        try
        {
           double salesPrice = Double.parseDouble(txtSalesPrice.getText());
           if(salesPrice<=selectedProduct.getPrice())
           {
                JOptionPane.showMessageDialog(null, "SalesPrice cannot be less than actual price");  
                return;
           }
           if(fetchQty<=selectedProduct.getAvail())
           {
               boolean alreadyPresent = false;
               for(OrderItem oi: order.getOrderItemList())
               {
                   if(oi.getProduct()==selectedProduct)
                   {
                       int oldAvail = selectedProduct.getAvail();
                       int newAvail = oldAvail - fetchQty;
                       selectedProduct.setAvail(newAvail);
                       oi.setQuatity(fetchQty+oi.getQuatity());
                       alreadyPresent = true;
                       populateTable();
                       refreshOrderTable();
                       break;
                   }
               }
               if(!alreadyPresent)
               {
                   int oldAvail = selectedProduct.getAvail();
                   int newAvail = oldAvail - fetchQty;
                   selectedProduct.setAvail(newAvail);
                   order.addOrderItem(selectedProduct,fetchQty,salesPrice);
                   populateTable();
                   refreshOrderTable();
                   
               }
           }
             else
               JOptionPane.showMessageDialog(this, "Quantity>Availibility","Warning", JOptionPane.WARNING_MESSAGE);
        }
        catch(Exception e)
        {
             JOptionPane.showMessageDialog(null, "Invaild SalesPrice");
             return;
        }
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnViewOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderItemActionPerformed
        // TODO add your handling code here:
         int row = orderTable.getSelectedRow();
         if(row <0){
              JOptionPane.showMessageDialog(null, "Please select a row from table first to view details!","Warning",JOptionPane.WARNING_MESSAGE);
              return;
         }
         OrderItem oi = (OrderItem)orderTable.getValueAt(row,0);
         
             ViewOrderItemDetailJPanel vpdjp = new ViewOrderItemDetailJPanel(upc,oi);
               upc.add("ViewProductItemDetailJPanel",vpdjp);
              CardLayout layout =(CardLayout) upc.getLayout();
               layout.next(upc);
    }//GEN-LAST:event_btnViewOrderItemActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderTable.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "Please Select  a row!");
            return;
        }
        OrderItem oi = (OrderItem)orderTable.getValueAt(selectedRow,0);
        int currentAvail = oi.getProduct().getAvail();
        int oldQty = oi.getQuatity();
        int newQty = Integer.parseInt(txtNewQuantity.getText());
        if(newQty>(currentAvail + oldQty))
        {
             JOptionPane.showMessageDialog(null, "Quantity is more than availibility");
             return;
        }
        else
        {
            if(newQty<=0)
            {
                JOptionPane.showMessageDialog(null, "Quantity should be greater than 0");
                return;
           
            }
            oi.setQuatity(newQty);
            oi.getProduct().setAvail(currentAvail + (oldQty-newQty));
            refreshOrderTable();
            populateTable();
        }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if(order.getOrderItemList().size()>0)
        {
         moc.addOrder(order);
         JOptionPane.showMessageDialog(null, "Order placed successfully");
         order= new Order();
         refreshOrderTable();
         populateTable();
         isCheckedOut = true;
         
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No order placed");
        }
         
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        // TODO add your handling code here:
       int row = orderTable.getSelectedRow();
         if(row <0){
              JOptionPane.showMessageDialog(null, "Please select a row from table first to view details!","Warning",JOptionPane.WARNING_MESSAGE);
              return;
         }
         OrderItem oi = (OrderItem)orderTable.getValueAt(row,0);
         int oldAvail = oi.getProduct().getAvail();
         int oldQty = oi.getQuatity();
         int newQty = oldAvail + oldAvail;
         oi.getProduct().setAvail(newQty);
         order.removeOrderItem(oi);
         JOptionPane.showMessageDialog(null, "OrderItem removed from the cart");
         refreshOrderTable();
         populateTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JButton btnViewOrderItem;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox supplierComboBox;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSearchKeyWord;
    private javax.swing.JButton viewProdjButton2;
    // End of variables declaration//GEN-END:variables
}
